/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Aplicacion;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import clases.Propietario;
import java.util.ArrayList;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author berny
 */
public class Propietarios extends javax.swing.JFrame {

    private DefaultTableModel tableModel;
    private ArrayList<Propietario> propietariosList;
    private GuanaRent guana;

    /**
     * Creates new form Propietarios
     *
     * @param propietariosList
     * @param guana
     */
    public Propietarios(ArrayList<Propietario> propietariosList, GuanaRent guana) {
        this.guana = guana;
        setTitle("Propietarios");
        this.propietariosList = propietariosList;
        initComponents();
        // Inicializar el modelo de tabla
        tableModel = (DefaultTableModel) tblPropietarios.getModel();
        // Inicializamos el ArrayList
        propietariosList = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        pnlCentral = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblPropietarios = new javax.swing.JLabel();
        txtCedula = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        lblGenero = new javax.swing.JLabel();
        CmbxGenero = new javax.swing.JComboBox<>();
        lblDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        lblTelefono = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblBuscar = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        btnActualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPropietarios = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Cedula ");

        lblPropietarios.setText("Propietarios ");

        lblNombre.setText("Nombre");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir ");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblGenero.setText("Genero");

        CmbxGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genero", "Masculino", "Femenino" }));

        lblDireccion.setText("Direccion");

        lblTelefono.setText("Telefono");

        lblEmail.setText("Email");

        lblBuscar.setText("Buscar ");

        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCentralLayout = new javax.swing.GroupLayout(pnlCentral);
        pnlCentral.setLayout(pnlCentralLayout);
        pnlCentralLayout.setHorizontalGroup(
            pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentralLayout.createSequentialGroup()
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(lblPropietarios))
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCentralLayout.createSequentialGroup()
                                .addComponent(lblGenero)
                                .addGap(18, 18, 18)
                                .addComponent(CmbxGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCentralLayout.createSequentialGroup()
                                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblNombre)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCedula, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                    .addComponent(txtNombre)))
                            .addGroup(pnlCentralLayout.createSequentialGroup()
                                .addComponent(lblDireccion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(59, 59, 59)
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTelefono)
                            .addComponent(lblEmail)
                            .addComponent(lblBuscar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTelefono)
                            .addComponent(txtEmail)
                            .addComponent(txtBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)))
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(btnGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar)
                        .addGap(18, 18, 18)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        pnlCentralLayout.setVerticalGroup(
            pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPropietarios)
                .addGap(23, 23, 23)
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTelefono)
                        .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombre))
                        .addGap(18, 18, 18)
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGenero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CmbxGenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmail))
                        .addGap(26, 26, 26)
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBuscar)
                            .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addComponent(lblDireccion)
                        .addGap(33, 33, 33)
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tblPropietarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cedula", "Nombre", "Genero", "Direccion", "Telefono", "Email"
            }
        ));
        jScrollPane1.setViewportView(tblPropietarios);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCentral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(pnlCentral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        String cedulaStr = txtCedula.getText();
        String nombre = txtNombre.getText();
        String genero = (String) CmbxGenero.getSelectedItem();
        String direccion = txtDireccion.getText();
        String telefonoStr = txtTelefono.getText();
        String email = txtEmail.getText();

        if (cedulaStr.isEmpty() || nombre.isEmpty() || genero.equals("Genero")
                || direccion.isEmpty() || telefonoStr.isEmpty() || email.isEmpty()) {

            StringBuilder errorMessage = new StringBuilder("Los siguientes campos están vacíos:\n");

            if (cedulaStr.isEmpty()) {
                errorMessage.append("- Cédula\n");
            }
            if (nombre.isEmpty()) {
                errorMessage.append("- Nombre\n");
            }
            if (genero.equals("Genero")) {
                errorMessage.append("- Género\n");
            }
            if (direccion.isEmpty()) {
                errorMessage.append("- Dirección\n");
            }
            if (telefonoStr.isEmpty()) {
                errorMessage.append("- Teléfono\n");
            }
            if (email.isEmpty()) {
                errorMessage.append("- Email\n");
            }

            JOptionPane.showMessageDialog(this, errorMessage.toString(), "Campos Vacíos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int cedula = Integer.parseInt(cedulaStr);

            if (isCedulaDuplicate(cedula)) {
                JOptionPane.showMessageDialog(this, "Ya existe un usuario con esta cédula.", "Cédula Duplicada", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int telefono = Integer.parseInt(telefonoStr);

            Propietario propietario = new Propietario(cedula, nombre, genero, direccion, telefono, email);

            propietariosList.add(propietario);
            // Agregar a la tabla
            agregarPropietarioATabla(propietario, genero);

            // Limpiar campos de entrada
            txtCedula.setText("");
            txtNombre.setText("");
            CmbxGenero.setSelectedItem("Genero");
            txtDireccion.setText("");
            txtTelefono.setText("");
            txtEmail.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Cedula y telefono deben ser números válidos.");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    public void setGuanaRentFrame(GuanaRent guanaRentFrame) {
        this.guana = guanaRentFrame;
    }

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        guana.showGuanaRentFrame();
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int selectedRow = tblPropietarios.getSelectedRow();

        if (selectedRow != -1) {
            int confirmation = JOptionPane.showConfirmDialog(this, "¿Desea eliminar este propietario?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmation == JOptionPane.YES_OPTION) {
                propietariosList.remove(selectedRow);
                tableModel.removeRow(selectedRow);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un propietario de la tabla para eliminar.", "Ningún Propietario Seleccionado", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        String buscar = txtBuscar.getText().toLowerCase();

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblPropietarios.getModel());
        tblPropietarios.setRowSorter(sorter);

        // Crear un filtro que busque coincidencias en las columnas de Cédula (0) y Nombre (1)
        RowFilter<TableModel, Object> cedulaFilter = RowFilter.regexFilter("^" + buscar + "$", 0);
        RowFilter<TableModel, Object> nombreFilter = RowFilter.regexFilter(buscar, 1, 2); // Buscar en las columnas 1 y 2 (Nombre y Género)

        // Combinar los filtros para que se cumpla cualquiera de las condiciones (OR)
        RowFilter<TableModel, Object> combinedFilter = RowFilter.orFilter(java.util.Arrays.asList(cedulaFilter, nombreFilter));

        sorter.setRowFilter(combinedFilter);
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int selectedRow = tblPropietarios.getSelectedRow();

        if (selectedRow != -1) {
            Editar(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un propietario de la tabla para editar.", "Ningún Propietario Seleccionado", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        int selectedRow = tblPropietarios.getSelectedRow();

        if (selectedRow != -1) {
            String cedulaStr = txtCedula.getText();
            String nombre = txtNombre.getText();
            String genero = (String) CmbxGenero.getSelectedItem();
            String direccion = txtDireccion.getText();
            String telefonoStr = txtTelefono.getText();
            String email = txtEmail.getText();

            if (cedulaStr.isEmpty() || nombre.isEmpty() || genero.equals("Genero")
                    || direccion.isEmpty() || telefonoStr.isEmpty() || email.isEmpty()) {

                JOptionPane.showMessageDialog(this, "Complete todos los campos antes de actualizar.", "Campos Vacíos", JOptionPane.WARNING_MESSAGE);
                return;
            }

            try {
                int cedula = Integer.parseInt(cedulaStr);
                int telefono = Integer.parseInt(telefonoStr);

                Propietario propietario = new Propietario(cedula, nombre, genero, direccion, telefono, email);

                // Actualizar la información en la lista
                propietariosList.set(selectedRow, propietario);

                // Actualizar la fila en la tabla
                tableModel.setValueAt(cedula, selectedRow, 0);
                tableModel.setValueAt(nombre, selectedRow, 1);
                tableModel.setValueAt(genero, selectedRow, 2);
                tableModel.setValueAt(direccion, selectedRow, 3);
                tableModel.setValueAt(telefono, selectedRow, 4);
                tableModel.setValueAt(email, selectedRow, 5);

                // Limpiar campos de entrada
                txtCedula.setText("");
                txtNombre.setText("");
                CmbxGenero.setSelectedItem("Genero");
                txtDireccion.setText("");
                txtTelefono.setText("");
                txtEmail.setText("");

                JOptionPane.showMessageDialog(this, "Propietario actualizado correctamente.", "Actualización Exitosa", JOptionPane.INFORMATION_MESSAGE);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Cedula y telefono deben ser números válidos.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un propietario de la tabla para editar.", "Ningún Propietario Seleccionado", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ArrayList<Propietario> propietariosList = new ArrayList<>();
                GuanaRent guanaRentFrame = new GuanaRent();
                guanaRentFrame.setPropietariosList(propietariosList);
                guanaRentFrame.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CmbxGenero;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblGenero;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPropietarios;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JPanel pnlCentral;
    private javax.swing.JTable tblPropietarios;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    private void agregarPropietarioATabla(Propietario propietario, String genero) {

        tableModel.addRow(new Object[]{
            propietario.getCedPropiet(),
            propietario.getNomPropiet(),
            genero,
            propietario.getDireccion(),
            propietario.getTelefono(),
            propietario.getEmail()
        });
    }

    private void Editar(int selectedRow) {
        if (selectedRow != -1) {
            TableModel model = tblPropietarios.getModel();
            txtCedula.setText(model.getValueAt(selectedRow, 0).toString());
            txtNombre.setText(model.getValueAt(selectedRow, 1).toString());
            String genero = model.getValueAt(selectedRow, 2).toString();
            CmbxGenero.setSelectedItem(genero);
            txtDireccion.setText(model.getValueAt(selectedRow, 3).toString());
            txtTelefono.setText(model.getValueAt(selectedRow, 4).toString());
            txtEmail.setText(model.getValueAt(selectedRow, 5).toString());
        }
    }

    private boolean isCedulaDuplicate(int cedula) {
        for (Propietario propietario : propietariosList) {
            if (propietario.getCedPropiet() == cedula) {
                return true;
            }
        }
        return false;
    }
}
