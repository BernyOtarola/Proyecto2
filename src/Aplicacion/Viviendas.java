/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Aplicacion;

import javax.swing.table.DefaultTableModel;
import clases.Propietario;
import clases.Vivienda;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author berny
 */
public class Viviendas extends javax.swing.JFrame {

    private ArrayList<Vivienda> viviendasList;
    private GuanaRent guana;
    private ArrayList<Propietario> propietariosList;
    private Vivienda viviendaSeleccionada;

    /**
     * Creates new form Viviendas
     *
     * @param viviendasList
     * @param propietariosList
     * @param guana
     */
    public Viviendas(ArrayList<Vivienda> viviendasList, ArrayList<Propietario> propietariosList, GuanaRent guana) {
        initComponents();
        this.guana = guana;
        this.viviendasList = viviendasList;
        this.propietariosList = propietariosList;
        actualizarTablaViviendas();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlCentral = new javax.swing.JPanel();
        lblViviendas = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtIdVivienda = new javax.swing.JTextField();
        lblDescripcion = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtaDescripcion = new javax.swing.JTextArea();
        lblDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtMtsConstruc = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        lblMtsLote = new javax.swing.JLabel();
        txtMtsLote = new javax.swing.JTextField();
        lblTipoConstruccion = new javax.swing.JLabel();
        cmbxTipoConstruccion = new javax.swing.JComboBox<>();
        lblCochera = new javax.swing.JLabel();
        cmbxCochera = new javax.swing.JComboBox<>();
        lblCantHabitaciones = new javax.swing.JLabel();
        txtCantHabitaciones = new javax.swing.JTextField();
        lblCantBa単os = new javax.swing.JLabel();
        txtCantBa単os = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lblCarretera = new javax.swing.JLabel();
        cmbxCarretera = new javax.swing.JComboBox<>();
        lblPrecioBase = new javax.swing.JLabel();
        txtPrecioBase = new javax.swing.JTextField();
        lblDepositoGarantia = new javax.swing.JLabel();
        txtDepositoGarantia = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        cmbxEstado = new javax.swing.JComboBox<>();
        lblPropietario = new javax.swing.JLabel();
        txtPropietario = new javax.swing.JTextField();
        lblBuscarId = new javax.swing.JLabel();
        txtBuscarId = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblViviendas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlCentral.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblViviendas.setText("Viviendas");

        jLabel1.setText("IdVivienda");

        lblDescripcion.setText("Descripcion");

        txtaDescripcion.setColumns(20);
        txtaDescripcion.setRows(5);
        jScrollPane2.setViewportView(txtaDescripcion);

        lblDireccion.setText("Direccion");

        jLabel2.setText("mtsConstruc");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblMtsLote.setText("mts Lote");

        lblTipoConstruccion.setText("TipoConstruccion");

        cmbxTipoConstruccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona", "Block", "Baldosa ", "Super block", "Madera", "Mixta" }));

        lblCochera.setText("Cochera");

        cmbxCochera.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona", "Si", "No" }));

        lblCantHabitaciones.setText("CantHabitaciones");

        lblCantBa単os.setText("CantBa単os");

        lblCarretera.setText("Carretera");

        cmbxCarretera.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona", "Lastre", "Pavimentada", "Adoquinada" }));

        lblPrecioBase.setText("PrecioBase");

        lblDepositoGarantia.setText("DepositoGarantia ");

        lblEstado.setText("Estado");

        cmbxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona ", "Disponible", "Alquilada ", "Inactiva" }));
        cmbxEstado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblPropietario.setText("Propietario");

        txtPropietario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtPropietarioMouseEntered(evt);
            }
        });

        lblBuscarId.setText("Buscar Id");

        txtBuscarId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCentralLayout = new javax.swing.GroupLayout(pnlCentral);
        pnlCentral.setLayout(pnlCentralLayout);
        pnlCentralLayout.setHorizontalGroup(
            pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentralLayout.createSequentialGroup()
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addGap(283, 283, 283)
                        .addComponent(lblViviendas))
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(lblMtsLote)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlCentralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblDescripcion)
                                .addComponent(jLabel1)
                                .addComponent(lblDireccion))
                            .addComponent(lblPropietario))
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCentralLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlCentralLayout.createSequentialGroup()
                                        .addComponent(txtPropietario, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(pnlCentralLayout.createSequentialGroup()
                                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlCentralLayout.createSequentialGroup()
                                                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtDireccion, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                                                    .addComponent(txtMtsConstruc)
                                                    .addComponent(txtMtsLote)
                                                    .addComponent(txtIdVivienda))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblTipoConstruccion)
                                                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(lblCantHabitaciones)
                                                            .addComponent(lblCochera)))
                                                    .addComponent(lblCantBa単os, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblCarretera, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblDepositoGarantia, javax.swing.GroupLayout.Alignment.TRAILING)))
                                            .addGroup(pnlCentralLayout.createSequentialGroup()
                                                .addComponent(txtPrecioBase, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblEstado)))
                                        .addGap(27, 27, 27)
                                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtCantHabitaciones, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                                                .addComponent(txtCantBa単os)
                                                .addComponent(cmbxTipoConstruccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(cmbxCochera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(cmbxCarretera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDepositoGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cmbxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtBuscarId, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(pnlCentralLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblBuscarId)
                                    .addGroup(pnlCentralLayout.createSequentialGroup()
                                        .addComponent(btnGuardar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnEditar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnEliminar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnActualizar)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSalir)
                                .addContainerGap())))
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addComponent(lblPrecioBase)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlCentralLayout.setVerticalGroup(
            pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCentralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblViviendas)
                .addGap(18, 18, 18)
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIdVivienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTipoConstruccion)
                    .addComponent(cmbxTipoConstruccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescripcion)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlCentralLayout.createSequentialGroup()
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCochera)
                            .addComponent(cmbxCochera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCantHabitaciones)
                            .addComponent(txtCantHabitaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(12, 12, 12)
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDireccion)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCantBa単os)
                    .addComponent(txtCantBa単os, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMtsConstruc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(lblCarretera)
                    .addComponent(cmbxCarretera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMtsLote)
                    .addComponent(txtMtsLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDepositoGarantia)
                    .addComponent(txtDepositoGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrecioBase)
                    .addComponent(txtPrecioBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEstado)
                    .addComponent(cmbxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPropietario)
                    .addComponent(txtPropietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBuscarId)
                    .addComponent(txtBuscarId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(pnlCentralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        tblViviendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdVivienda", "Descripcion", "Direccion", "mtsConstruc", "mtsLote", "PrecioBase", "NomPropietario", "tipoConstruccion", "Cochera", "CantHabitaciones", "CantBa単os", "Carretera", "DepositoGarantia", "Estado"
            }
        ));
        jScrollPane1.setViewportView(tblViviendas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCentral, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCentral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setGuanaRentFrame(GuanaRent guanaRentFrame) {
        this.guana = guanaRentFrame;
    }

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        guana.showGuanaRentFrame();
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            String idViviendaText = txtIdVivienda.getText();
            String descripcion = txtaDescripcion.getText();
            String direccion = txtDireccion.getText();
            String mtsConstructText = txtMtsConstruc.getText();
            String mtsLoteText = txtMtsLote.getText();
            String tipoConstruccion = cmbxTipoConstruccion.getSelectedItem().toString();
            boolean cochera = cmbxCochera.getSelectedItem().toString().equals("Si");
            String cantHabitacText = txtCantHabitaciones.getText();
            String cantBa単osText = txtCantBa単os.getText();
            String carretera = cmbxCarretera.getSelectedItem().toString();
            String precioBaseText = txtPrecioBase.getText();
            String depositoGarantiaText = txtDepositoGarantia.getText();
            String estado = cmbxEstado.getSelectedItem().toString();
            String propietarioCedula = txtPropietario.getText();

            if (viviendaAlreadyExists(idViviendaText)) {
                JOptionPane.showMessageDialog(this, "Ya existe una vivienda con este IdVivienda.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (idViviendaText.isEmpty() || descripcion.isEmpty() || direccion.isEmpty()
                    || mtsConstructText.isEmpty() || mtsLoteText.isEmpty() || tipoConstruccion.isEmpty()
                    || cantHabitacText.isEmpty() || cantBa単osText.isEmpty() || carretera.isEmpty()
                    || precioBaseText.isEmpty() || depositoGarantiaText.isEmpty() || estado.isEmpty()
                    || propietarioCedula.isEmpty()) {

                StringBuilder errorMessage = new StringBuilder("Los siguientes campos est叩n vac鱈os:\n");

                if (idViviendaText.isEmpty()) {
                    errorMessage.append("- IdVivienda\n");
                }
                if (descripcion.isEmpty()) {
                    errorMessage.append("- Descripcion\n");
                }
                if (direccion.isEmpty()) {
                    errorMessage.append("- Direccion\n");
                }
                if (mtsConstructText.isEmpty()) {
                    errorMessage.append("- mtsConstruct\n");
                }
                if (mtsLoteText.isEmpty()) {
                    errorMessage.append("- mtsLote\n");
                }
                if (tipoConstruccion.isEmpty()) {
                    errorMessage.append("- TipoConstruccion\n");
                }
                if (cantHabitacText.isEmpty()) {
                    errorMessage.append("- CantHabitac\n");
                }
                if (cantBa単osText.isEmpty()) {
                    errorMessage.append("- CantBa単os\n");
                }
                if (carretera.isEmpty()) {
                    errorMessage.append("- Carretera\n");
                }
                if (precioBaseText.isEmpty()) {
                    errorMessage.append("- PrecioBase\n");
                }
                if (depositoGarantiaText.isEmpty()) {
                    errorMessage.append("- DepositoGarantia\n");
                }
                if (estado.isEmpty()) {
                    errorMessage.append("- Estado\n");
                }
                if (propietarioCedula.isEmpty()) {
                    errorMessage.append("- Propietario\n");
                }

                JOptionPane.showMessageDialog(this, errorMessage.toString(), "Campos Vac鱈os", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int idVivienda = Integer.parseInt(idViviendaText);
            double mtsConstruct = Double.parseDouble(mtsConstructText);
            double mtsLote = Double.parseDouble(mtsLoteText);
            int cantHabitac = Integer.parseInt(cantHabitacText);
            double cantBa単os = Double.parseDouble(cantBa単osText);
            double precioBase = Double.parseDouble(precioBaseText);
            double depositoGarantia = Double.parseDouble(depositoGarantiaText);

            Propietario propietario = obtenerPropietario(propietarioCedula);

            if (propietario == null) {
                JOptionPane.showMessageDialog(this, "El propietario no existe", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Vivienda vivienda = new Vivienda(idVivienda, descripcion, direccion, mtsConstruct, mtsLote,
                    tipoConstruccion, cochera, cantHabitac, cantBa単os, carretera,
                    precioBase, depositoGarantia, propietario, estado);

            viviendasList.add(vivienda);

            actualizarTablaViviendas();

            // Limpia los campos despu辿s de guardar
            limpiarCampos();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores num辿ricos v叩lidos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int filaSeleccionada = tblViviendas.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una vivienda para editar.", "Vivienda no seleccionada", JOptionPane.WARNING_MESSAGE);
            return;
        }

        viviendaSeleccionada = viviendasList.get(filaSeleccionada);

        txtIdVivienda.setText(String.valueOf(viviendaSeleccionada.getIdVivienda()));
        txtaDescripcion.setText(viviendaSeleccionada.getDescripcion());
        txtDireccion.setText(viviendaSeleccionada.getDireccion());
        txtMtsConstruc.setText(String.valueOf(viviendaSeleccionada.getMtsConstruct()));
        txtMtsLote.setText(String.valueOf(viviendaSeleccionada.getMtsLote()));
        cmbxTipoConstruccion.setSelectedItem(viviendaSeleccionada.getTipoConstruccion());
        cmbxCochera.setSelectedItem(viviendaSeleccionada.isCochera() ? "Si" : "No");
        txtCantHabitaciones.setText(String.valueOf(viviendaSeleccionada.getCantHabitac()));
        txtCantBa単os.setText(String.valueOf(viviendaSeleccionada.getCantBa単os()));
        cmbxCarretera.setSelectedItem(viviendaSeleccionada.getCarretera());
        txtPrecioBase.setText(String.valueOf(viviendaSeleccionada.getPrecioBase()));
        txtDepositoGarantia.setText(String.valueOf(viviendaSeleccionada.getDepositoGarantia()));
        cmbxEstado.setSelectedItem(viviendaSeleccionada.getEstado());  // Populate Estado
        txtPropietario.setText(String.valueOf(viviendaSeleccionada.getPropietario().getCedPropiet()));  // Populate Propietario

        btnActualizar.setEnabled(true);


    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        if (viviendaSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "No hay vivienda seleccionado para actualizar.", "Vivienda no seleccionado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Retrieve the data from the fields
            String descripcion = txtaDescripcion.getText();
            String direccion = txtDireccion.getText();
            String mtsConstructText = txtMtsConstruc.getText();
            String mtsLoteText = txtMtsLote.getText();
            String tipoConstruccion = cmbxTipoConstruccion.getSelectedItem().toString();
            boolean cochera = cmbxCochera.getSelectedItem().toString().equals("Si");
            String cantHabitacText = txtCantHabitaciones.getText();
            String cantBa単osText = txtCantBa単os.getText();
            String carretera = cmbxCarretera.getSelectedItem().toString();
            String precioBaseText = txtPrecioBase.getText();
            String depositoGarantiaText = txtDepositoGarantia.getText();
            String estado = cmbxEstado.getSelectedItem().toString();
            String propietarioCedula = txtPropietario.getText();

            // Parse numeric data
            double mtsConstruct = Double.parseDouble(mtsConstructText);
            double mtsLote = Double.parseDouble(mtsLoteText);
            int cantHabitac = Integer.parseInt(cantHabitacText);
            double cantBa単os = Double.parseDouble(cantBa単osText);
            double precioBase = Double.parseDouble(precioBaseText);
            double depositoGarantia = Double.parseDouble(depositoGarantiaText);

            // Update the viviendaSeleccionada with the new data
            viviendaSeleccionada.setDescripcion(descripcion);
            viviendaSeleccionada.setDireccion(direccion);
            viviendaSeleccionada.setMtsConstruct(mtsConstruct);
            viviendaSeleccionada.setMtsLote(mtsLote);
            viviendaSeleccionada.setTipoConstruccion(tipoConstruccion);
            viviendaSeleccionada.setCochera(cochera);
            viviendaSeleccionada.setCantHabitac(cantHabitac);
            viviendaSeleccionada.setCantBa単os(cantBa単os);
            viviendaSeleccionada.setCarretera(carretera);
            viviendaSeleccionada.setPrecioBase(precioBase);
            viviendaSeleccionada.setDepositoGarantia(depositoGarantia);
            viviendaSeleccionada.setEstado(estado);
            viviendaSeleccionada.setPropietario(obtenerPropietario(propietarioCedula));

            // Update the table
            actualizarTablaViviendas();

            // Reset UI elements
            limpiarCampos();
            viviendaSeleccionada = null;  // Reset the selected vivienda

            // Optionally disable the "btnActualizar" button again
            btnActualizar.setEnabled(false);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores num辿ricos v叩lidos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int filaSeleccionada = tblViviendas.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione una vivienda para eliminar.", "Vivienda no seleccionada", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Vivienda viviendaEliminar = viviendasList.get(filaSeleccionada);

        int confirmacion = JOptionPane.showConfirmDialog(this, "多Est叩 seguro de eliminar esta vivienda?", "Confirmar Eliminaci坦n", JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {

            viviendasList.remove(viviendaEliminar);

            actualizarTablaViviendas();

            JOptionPane.showMessageDialog(this, "Vivienda eliminada exitosamente", "Eliminaci坦n Exitosa", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtBuscarIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarIdActionPerformed
        String buscar = txtBuscarId.getText().toLowerCase();

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblViviendas.getModel());
        tblViviendas.setRowSorter(sorter);

        // Crear un filtro que busque coincidencias en las columnas de C辿dula (0) y Nombre (1)
        RowFilter<TableModel, Object> cedulaFilter = RowFilter.regexFilter("^" + buscar + "$", 0);
        RowFilter<TableModel, Object> nombreFilter = RowFilter.regexFilter(buscar, 1, 2);

        // Combinar los filtros para que se cumpla cualquiera de las condiciones (OR)
        RowFilter<TableModel, Object> combinedFilter = RowFilter.orFilter(java.util.Arrays.asList(cedulaFilter, nombreFilter));

        sorter.setRowFilter(combinedFilter);
    }//GEN-LAST:event_txtBuscarIdActionPerformed

    private void txtPropietarioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPropietarioMouseEntered
        String tooltipMessage = "Por favor, ingrese la cedula del Propietario.";
        txtPropietario.setToolTipText(tooltipMessage);
    }//GEN-LAST:event_txtPropietarioMouseEntered

    private Propietario obtenerPropietario(String cedula) {
        int cedulaNumero = Integer.parseInt(cedula);
        for (Propietario propietario : propietariosList) {
            if (propietario.getCedPropiet() == cedulaNumero) {
                return propietario;
            }
        }
        return null;
    }

    private void limpiarCampos() {
        txtIdVivienda.setText("");
        txtaDescripcion.setText("");
        txtDireccion.setText("");
        txtMtsConstruc.setText("");
        txtMtsLote.setText("");
        txtPrecioBase.setText("");
        txtPropietario.setText("");
        cmbxTipoConstruccion.setSelectedIndex(0);
        cmbxCochera.setSelectedIndex(0);
        txtCantHabitaciones.setText("");
        txtCantBa単os.setText("");
        cmbxCarretera.setSelectedIndex(0);
        txtDepositoGarantia.setText("");
        cmbxEstado.setSelectedIndex(0);
    }

    private boolean viviendaAlreadyExists(String idVivienda) {
        for (Vivienda existingVivienda : viviendasList) {
            if (String.valueOf(existingVivienda.getIdVivienda()).equals(idVivienda)) {
                return true;
            }
        }
        return false;
    }

    private void actualizarTablaViviendas() {
        DefaultTableModel model = (DefaultTableModel) tblViviendas.getModel();
        model.setRowCount(0);

        for (Vivienda vivienda : viviendasList) {
            model.addRow(new Object[]{
                vivienda.getIdVivienda(),
                vivienda.getDescripcion(),
                vivienda.getDireccion(),
                vivienda.getMtsConstruct(),
                vivienda.getMtsLote(),
                vivienda.getPrecioBase(),
                vivienda.getPropietario().getNomPropiet(),
                vivienda.getTipoConstruccion(),
                vivienda.isCochera() ? "Si" : "No",
                vivienda.getCantHabitac(),
                vivienda.getCantBa単os(),
                vivienda.getCarretera(),
                vivienda.getDepositoGarantia(),
                vivienda.getEstado()
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ArrayList<Vivienda> viviendasList = new ArrayList<>();
                ArrayList<Propietario> propietariosList = new ArrayList<>();
                GuanaRent guanaRentFrame = new GuanaRent();
                guanaRentFrame.setViviendasList(viviendasList);
                Viviendas viviendasFrame = new Viviendas(viviendasList, propietariosList, guanaRentFrame);
                viviendasFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnSalir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbxCarretera;
    private javax.swing.JComboBox<String> cmbxCochera;
    private javax.swing.JComboBox<String> cmbxEstado;
    private javax.swing.JComboBox<String> cmbxTipoConstruccion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBuscarId;
    private javax.swing.JLabel lblCantBa単os;
    private javax.swing.JLabel lblCantHabitaciones;
    private javax.swing.JLabel lblCarretera;
    private javax.swing.JLabel lblCochera;
    private javax.swing.JLabel lblDepositoGarantia;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblMtsLote;
    private javax.swing.JLabel lblPrecioBase;
    private javax.swing.JLabel lblPropietario;
    private javax.swing.JLabel lblTipoConstruccion;
    private javax.swing.JLabel lblViviendas;
    private javax.swing.JPanel pnlCentral;
    private javax.swing.JTable tblViviendas;
    private javax.swing.JTextField txtBuscarId;
    private javax.swing.JTextField txtCantBa単os;
    private javax.swing.JTextField txtCantHabitaciones;
    private javax.swing.JTextField txtDepositoGarantia;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtIdVivienda;
    private javax.swing.JTextField txtMtsConstruc;
    private javax.swing.JTextField txtMtsLote;
    private javax.swing.JTextField txtPrecioBase;
    private javax.swing.JTextField txtPropietario;
    private javax.swing.JTextArea txtaDescripcion;
    // End of variables declaration//GEN-END:variables
}
