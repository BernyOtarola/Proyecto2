/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Aplicacion;

import clases.Alquiler;
import clases.Inquilino;
import clases.Mensualidad;
import clases.Vivienda;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author berny
 */
public class Ganancias extends javax.swing.JFrame {

    private Map<String, Integer> monthNameToNumber = new HashMap<>();
    private ArrayList<Mensualidad> mensualidadesList;
    private ArrayList<Alquiler> alquileresList;
    private ArrayList<Inquilino> inquilinosList;
    private ArrayList<Vivienda> viviendasList;
    private GuanaRent guana;
    private Mensualidades mensual;

    /**
     * Creates new form Ganancias
     *
     * @param mensualidadesList
     * @param alquileresList
     * @param viviendasList
     * @param inquilinosList
     * @param guana
     */
    public Ganancias(ArrayList<Mensualidad> mensualidadesList, ArrayList<Alquiler> alquileresList, ArrayList<Vivienda> viviendasList, ArrayList<Inquilino> inquilinosList, GuanaRent guana) {
        initComponents();
        setTitle("Gestion de ganancias");
        this.guana = guana;
        this.mensualidadesList = mensualidadesList;
        this.alquileresList = alquileresList;
        this.inquilinosList = inquilinosList;
        this.viviendasList = viviendasList;
        initializeMonthNameToNumber();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblGanancias = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblTotalGanancias = new javax.swing.JLabel();
        txtGanancias = new javax.swing.JTextField();
        lblGanancias = new javax.swing.JLabel();
        cmbxTipoGanancias = new javax.swing.JComboBox<>();
        btnGenerar = new javax.swing.JButton();
        lblEscoger = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnGananciasAnual = new javax.swing.JMenu();
        mntGananciasAnual = new javax.swing.JMenuItem();
        mnGananciasMensuales = new javax.swing.JMenu();
        mntGananciasMensual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblGanancias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°Mensualidad", "N° Alquiler", "N° Vivienda", "Cedula Inquilino", "Nombre Inquilino", "Deposito Garantia ", "Mensualidad ", "Total Ganado Deposito", "Total Ganado Mensual", "Total"
            }
        ));
        jScrollPane1.setViewportView(tblGanancias);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblTotalGanancias.setText("Total de ganancias ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(lblTotalGanancias)
                .addGap(77, 77, 77)
                .addComponent(txtGanancias, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(172, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalGanancias)
                    .addComponent(txtGanancias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        lblGanancias.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        lblGanancias.setText("Ganancias ");

        cmbxTipoGanancias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", " " }));
        cmbxTipoGanancias.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmbxTipoGanancias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cmbxTipoGananciasMouseEntered(evt);
            }
        });

        btnGenerar.setText("Generar");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        lblEscoger.setText("Escoge ");

        btnSalir.setText("Salir ");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar ");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblGanancias)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbxTipoGanancias, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEscoger))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(btnGenerar)
                        .addGap(38, 38, 38))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSalir)
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(btnGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(lblGanancias)
                        .addGap(39, 39, 39)
                        .addComponent(lblEscoger)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbxTipoGanancias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        mnGananciasAnual.setText("Ganancias Anual ");

        mntGananciasAnual.setText("Ganancias Anual");
        mntGananciasAnual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntGananciasAnualActionPerformed(evt);
            }
        });
        mnGananciasAnual.add(mntGananciasAnual);

        jMenuBar1.add(mnGananciasAnual);

        mnGananciasMensuales.setText("Ganancias Mensuales");

        mntGananciasMensual.setText("Ganancias Mensuales");
        mntGananciasMensual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntGananciasMensualActionPerformed(evt);
            }
        });
        mnGananciasMensuales.add(mntGananciasMensual);

        jMenuBar1.add(mnGananciasMensuales);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initializeMonthNameToNumber() {
        monthNameToNumber.put("Enero", 1);
        monthNameToNumber.put("Febrero", 2);
        monthNameToNumber.put("Marzo", 3);
        monthNameToNumber.put("Abril", 4);
        monthNameToNumber.put("Mayo", 5);
        monthNameToNumber.put("Junio", 6);
        monthNameToNumber.put("Julio", 7);
        monthNameToNumber.put("Agosto", 8);
        monthNameToNumber.put("Septiembre", 9);
        monthNameToNumber.put("Octubre", 10);
        monthNameToNumber.put("Noviembre", 11);
        monthNameToNumber.put("Diciembre", 12);
    }

    private void mntGananciasMensualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntGananciasMensualActionPerformed
        lblEscoger.setText("Escoger Mes");
        lblTotalGanancias.setText("Total de ganancias mensuales");

        cmbxTipoGanancias.removeAllItems();

        Set<Integer> uniqueMonths = new HashSet<>();
        for (Mensualidad mensualidad : mensualidadesList) {
            int month = mensualidad.getMesCobro();
            uniqueMonths.add(month);
        }
        for (int month : uniqueMonths) {
            cmbxTipoGanancias.addItem(String.valueOf(month));
        }

        DefaultTableModel model = (DefaultTableModel) tblGanancias.getModel();
        model.setColumnIdentifiers(new String[]{"N°Mensualidad", "N° Alquiler", "N° Vivienda", "Cedula Inquilino", "Nombre Inquilino", "Deposito Garantia ", "Mensualidad ", "Total Ganado Deposito", "Total Ganado Mensual", "Total"});
        txtGanancias.setText("");
    }//GEN-LAST:event_mntGananciasMensualActionPerformed

    private void mntGananciasAnualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntGananciasAnualActionPerformed
        lblEscoger.setText("Escoger Año");
        lblTotalGanancias.setText("Total de ganancias anuales");

        cmbxTipoGanancias.removeAllItems();

        // Populate cmbxTipoGanancias with unique years
        Set<Integer> uniqueYears = new HashSet<>();
        for (Mensualidad mensualidad : mensualidadesList) {
            int year = mensualidad.getAñoActual();
            uniqueYears.add(year);
        }
        for (int year : uniqueYears) {
            cmbxTipoGanancias.addItem(String.valueOf(year));

            // Adjust table column name
            DefaultTableModel model = (DefaultTableModel) tblGanancias.getModel();
            model.setColumnIdentifiers(new String[]{"N°Mensualidad", "N° Alquiler", "N° Vivienda", "Cedula Inquilino", "Nombre Inquilino", "Deposito Garantia ", "Mensualidad ", "Total Ganado Deposito", "Total Ganancias Anuales", "Total"});
            txtGanancias.setText("");
    }//GEN-LAST:event_mntGananciasAnualActionPerformed
    }

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblGanancias.getModel();
        model.setRowCount(0);

        String selectedOption = cmbxTipoGanancias.getSelectedItem().toString();

        if (selectedOption != null && !selectedOption.isEmpty()) {
            if (selectedOption.equals("Ganancias Anual")) {

            } else if (selectedOption.equals("Ganancias Mensuales")) {
                String selectedMonth = cmbxTipoGanancias.getSelectedItem().toString();
                String selectedYear = "2023"; 

                double totalMonthlyEarnings = 0.0;

                for (Mensualidad mensualidad : mensualidadesList) {
                    if (String.valueOf(mensualidad.getMesCobro()).equals(selectedMonth)
                            && String.valueOf(mensualidad.getAñoActual()).equals(selectedYear)) {
                        double depositoGanancia = mensualidad.getAlquiler().getDepositoGarantia() * 0.5;
                        double gananciaMensualidad = mensualidad.getMontoMes() * 0.05;
                        double totalGananciaMensual = depositoGanancia + gananciaMensualidad;
                        double totalGananciaAlquiler = mensualidad.getAlquiler().getPrecioAlquiler();
                        double total = totalGananciaMensual + totalGananciaAlquiler;

                        totalMonthlyEarnings += total;

                        model.addRow(new Object[]{
                            mensualidad.getConsecutivo(),
                            mensualidad.getAlquiler().getNumAlquiler(),
                            mensualidad.getVivienda().getIdVivienda(),
                            mensualidad.getInquilino().getCedInqui(),
                            mensualidad.getInquilino().getNomInqui(),
                            mensualidad.getAlquiler().getDepositoGarantia(),
                            mensualidad.getMontoMes(),
                            totalGananciaMensual,
                            totalGananciaAlquiler,
                            total
                        });
                    }
                }

                txtGanancias.setText(String.valueOf(totalMonthlyEarnings));
            }
        }


    }//GEN-LAST:event_btnGenerarActionPerformed

    public void setGuanaRentFrame(GuanaRent guanaRentFrame) {
        this.guana = guanaRentFrame;
    }

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        guana.showGuanaRentFrame();
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void cmbxTipoGananciasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbxTipoGananciasMouseEntered

        String selectedOption = cmbxTipoGanancias.getSelectedItem().toString();
        String tooltipMessage = "";

        if (selectedOption.equals("Seleccionar")) {
            tooltipMessage = "Escoge el tipo de ganancias en que quieres verlo primeramente,"
                    + "Ganancias anuales o Ganancias mensuales";
        } else if (selectedOption.equals("Ganancias Anual")) {
            tooltipMessage = "Escoge el año para ver las ganancias anuales.";
        } else if (selectedOption.equals("Ganancias Mensuales")) {
            tooltipMessage = "Escoge el mes y año para ver las ganancias mensuales.";
        }

        cmbxTipoGanancias.setToolTipText(tooltipMessage);
    }//GEN-LAST:event_cmbxTipoGananciasMouseEntered

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed

        DefaultTableModel model = (DefaultTableModel) tblGanancias.getModel();
        model.setRowCount(0);

        double totalGanancias = 0.0;

        for (Mensualidad mensualidad : mensualidadesList) {
            Alquiler alquiler = mensualidad.getAlquiler();
            Vivienda vivienda = mensualidad.getVivienda();
            Inquilino inquilino = mensualidad.getInquilino();

            double depositoGanancia = alquiler.getDepositoGarantia() * 0.5;
            double gananciaMensualidad = mensualidad.getMontoMes() * 0.05;
            double totalGananciaMensual = depositoGanancia + gananciaMensualidad;
            double totalGananciaAlquiler = alquiler.getPrecioAlquiler();
            double total = totalGananciaMensual + totalGananciaAlquiler;

            Object[] rowData = {
                Mensualidad.getConsecutivo(), // N° Mensualidad (usando el consecutivo)
                alquiler.getNumAlquiler(), // N° Alquiler
                vivienda.getIdVivienda(), // N° Vivienda
                inquilino.getCedInqui(), // Cedula Inquilino
                inquilino.getNomInqui(), // Nombre Inquilino
                alquiler.getDepositoGarantia(),// Deposito Garantia
                mensualidad.getMontoMes(), // Mensualidad
                totalGananciaMensual, // Total Ganado Deposito
                totalGananciaAlquiler, // Total Ganado Mensual
                total
            };

            model.addRow(rowData); // Agregar la fila a la tabla
            totalGanancias += total; // Actualizar el total de ganancias
        }

        txtGanancias.setText(String.valueOf(totalGanancias));

    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            ArrayList<Vivienda> viviendasList = new ArrayList<>();
            ArrayList<Alquiler> alquileresList = new ArrayList<>();
            ArrayList<Mensualidad> mensualidadesList = new ArrayList<>();
            ArrayList<Inquilino> inquilinosList = new ArrayList<>();
            GuanaRent guanaRentFrame = new GuanaRent();
            guanaRentFrame.setGananciasList(mensualidadesList);
            Ganancias gananciaFrame = new Ganancias(mensualidadesList, alquileresList, viviendasList, inquilinosList, guanaRentFrame);
            gananciaFrame.setVisible(true);
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cmbxTipoGanancias;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEscoger;
    private javax.swing.JLabel lblGanancias;
    private javax.swing.JLabel lblTotalGanancias;
    private javax.swing.JMenu mnGananciasAnual;
    private javax.swing.JMenu mnGananciasMensuales;
    private javax.swing.JMenuItem mntGananciasAnual;
    private javax.swing.JMenuItem mntGananciasMensual;
    private javax.swing.JTable tblGanancias;
    private javax.swing.JTextField txtGanancias;
    // End of variables declaration//GEN-END:variables

}
