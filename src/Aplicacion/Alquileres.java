/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Aplicacion;

import clases.Alquiler;
import clases.Inquilino;
import clases.Vivienda;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author berny
 */
public class Alquileres extends javax.swing.JFrame {

    private ArrayList<Alquiler> alquileresList;
    private ArrayList<Vivienda> viviendasList;
    private GuanaRent guana;
    private ArrayList<Inquilino> inquilinosList;
    private Alquiler alquilerSeleccionado;

    /**
     * Creates new form Alquileres
     *
     * @param alquileresList
     * @param viviendasList
     * @param inquilinosList
     * @param guana
     */
    public Alquileres(ArrayList<Alquiler> alquileresList, ArrayList<Vivienda> viviendasList, ArrayList<Inquilino> inquilinosList, GuanaRent guana) {
        initComponents();
        this.guana = guana;
        this.viviendasList = viviendasList;
        this.inquilinosList = inquilinosList;
        this.alquileresList = alquileresList;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblAlquileres = new javax.swing.JLabel();
        lblNumeroAlquiler = new javax.swing.JLabel();
        txtNumeroAlquiler = new javax.swing.JTextField();
        lblFechaContratro = new javax.swing.JLabel();
        txtFechaContratro = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActuliazar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        txtCantMeses = new javax.swing.JTextField();
        lblCantidadMeses = new javax.swing.JLabel();
        lblNumAdultos = new javax.swing.JLabel();
        txtNumAdultos = new javax.swing.JTextField();
        lblNumNiños = new javax.swing.JLabel();
        txtNumNiños = new javax.swing.JTextField();
        lblDepositoGarantia = new javax.swing.JLabel();
        txtDepositoGarantia = new javax.swing.JTextField();
        lblPrecioAlquiler = new javax.swing.JLabel();
        txtPrecioAlquiler = new javax.swing.JTextField();
        lblPorIncremAnual = new javax.swing.JLabel();
        txtPorIncremAnual = new javax.swing.JTextField();
        lblCedInquilino = new javax.swing.JLabel();
        txtCedInquilino = new javax.swing.JTextField();
        lblIdVivienda = new javax.swing.JLabel();
        txtIdVivienda = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        lblBuscarNum = new javax.swing.JLabel();
        txtBuscarNum = new javax.swing.JTextField();
        cmbxEstado = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAlquileres = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblAlquileres.setText("Alquileres");

        lblNumeroAlquiler.setText("NumAlquiler");

        lblFechaContratro.setText("FechaContrat");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActuliazar.setText("Actualizar");
        btnActuliazar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActuliazarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblCantidadMeses.setText("CantMeses");

        lblNumAdultos.setText("NumAdultos");

        lblNumNiños.setText("NumNiños");

        lblDepositoGarantia.setText("DepositoGarantia");

        lblPrecioAlquiler.setText("PrecioAlquiler");

        lblPorIncremAnual.setText("PorcIncremAnual");

        lblCedInquilino.setText("CedInquilino ");

        txtCedInquilino.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtCedInquilinoMouseEntered(evt);
            }
        });

        lblIdVivienda.setText("IdVivienda ");

        txtIdVivienda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdViviendaActionPerformed(evt);
            }
        });

        lblEstado.setText("Estado ");

        lblBuscarNum.setText("Buscar Num");

        txtBuscarNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarNumActionPerformed(evt);
            }
        });

        cmbxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Vigente", "Vencido", "Cancelado" }));

        jLabel1.setText("= YYYY-MM-DD");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnActuliazar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSalir)
                        .addGap(105, 105, 105))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFechaContratro)
                            .addComponent(lblCantidadMeses)
                            .addComponent(lblNumAdultos)
                            .addComponent(lblNumNiños)
                            .addComponent(lblDepositoGarantia)
                            .addComponent(lblNumeroAlquiler))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNumAdultos, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(txtNumNiños)
                            .addComponent(txtDepositoGarantia)
                            .addComponent(txtFechaContratro)
                            .addComponent(txtCantMeses)
                            .addComponent(txtNumeroAlquiler))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblPorIncremAnual))
                                    .addComponent(lblPrecioAlquiler, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblIdVivienda)
                                        .addComponent(lblCedInquilino)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtPorIncremAnual)
                                    .addComponent(txtCedInquilino, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(txtPrecioAlquiler)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(188, 188, 188)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblEstado)
                                    .addComponent(lblBuscarNum))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtBuscarNum)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(txtIdVivienda, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cmbxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(56, 56, 56)))))
                        .addGap(17, 17, 17))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblAlquileres)
                .addGap(291, 291, 291))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAlquileres)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumeroAlquiler)
                    .addComponent(txtNumeroAlquiler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrecioAlquiler)
                    .addComponent(txtPrecioAlquiler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFechaContratro)
                    .addComponent(txtFechaContratro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPorIncremAnual)
                    .addComponent(txtPorIncremAnual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCantMeses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCantidadMeses)
                    .addComponent(lblCedInquilino)
                    .addComponent(txtCedInquilino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumAdultos)
                    .addComponent(txtNumAdultos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIdVivienda)
                    .addComponent(txtIdVivienda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumNiños)
                    .addComponent(txtNumNiños, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEstado)
                    .addComponent(cmbxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDepositoGarantia)
                    .addComponent(txtDepositoGarantia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBuscarNum)
                    .addComponent(txtBuscarNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActuliazar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        tblAlquileres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NumAlquiler", "FechaContrat", "CantMeses", "NumAdultos", "NumNiños", "DepositoGarantia", "PrecioAlquiler", "PorcIncremAnual", "CedInquilino", "NomInquilino", "IdVivienda", "Estado"
            }
        ));
        jScrollPane1.setViewportView(tblAlquileres);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 3, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        try {
            int numAlquiler = Integer.parseInt(txtNumeroAlquiler.getText());
            if (isNumAlquilerExists(numAlquiler)) {
                JOptionPane.showMessageDialog(this, "El número de alquiler ya existe. Ingrese un número único.", "Número de alquiler duplicado", JOptionPane.ERROR_MESSAGE);
                return;
            }
            LocalDate fechaContrato = LocalDate.parse(txtFechaContratro.getText());
            int cantMeses = Integer.parseInt(txtCantMeses.getText());
            int numAdultos = Integer.parseInt(txtNumAdultos.getText());
            int numNiños = Integer.parseInt(txtNumNiños.getText());
            double depositoGarantia = Double.parseDouble(txtDepositoGarantia.getText());
            double precioAlquiler = Double.parseDouble(txtPrecioAlquiler.getText());
            double porcIncremAnual = Double.parseDouble(txtPorIncremAnual.getText());
            if (porcIncremAnual < 1 || porcIncremAnual > 30) {
                JOptionPane.showMessageDialog(this, "El porcentaje de incremento anual debe estar entre 1 y 30 por ciento.", "Valor fuera de rango", JOptionPane.ERROR_MESSAGE);
                return;
            }
            String estado = cmbxEstado.getSelectedItem().toString();
            int idVivienda = Integer.parseInt(txtIdVivienda.getText());
            int cedulaInquilino = Integer.parseInt(txtCedInquilino.getText());

            // Validar campos vacíos o incompletos
            if (txtNumeroAlquiler.getText().isEmpty() || txtFechaContratro.getText().isEmpty() || txtCantMeses.getText().isEmpty()
                    || txtNumAdultos.getText().isEmpty() || txtNumNiños.getText().isEmpty() || txtDepositoGarantia.getText().isEmpty()
                    || txtPrecioAlquiler.getText().isEmpty() || txtPorIncremAnual.getText().isEmpty() || cmbxEstado.getSelectedIndex() == 0
                    || txtIdVivienda.getText().isEmpty() || txtCedInquilino.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos obligatorios.", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
                return;
            }

            Inquilino inquilino = InquilinoCedula(cedulaInquilino);
            if (inquilino == null) {
                JOptionPane.showMessageDialog(this, "El inquilino con la cédula proporcionada no existe.", "Inquilino no encontrado", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Vivienda vivienda = ViviendaId(idVivienda);
            if (vivienda == null) {
                JOptionPane.showMessageDialog(this, "La vivienda con el ID proporcionado no existe.", "Vivienda no encontrada", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Alquiler alquiler = new Alquiler(
                    numAlquiler, fechaContrato, cantMeses, numAdultos, numNiños,
                    depositoGarantia, precioAlquiler, porcIncremAnual, inquilino, vivienda, estado
            );

            alquileresList.add(alquiler);

            agregarAlquilerATabla();

            LimpiarCampos();
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Error en el formato de la fecha. Use el formato correcto (AAAA-MM-DD).", "Error de formato", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error en los datos ingresados. Verifique los valores numéricos.", "Error de formato", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    public void setGuanaRentFrame(GuanaRent guanaRentFrame) {
        this.guana = guanaRentFrame;
    }

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        guana.showGuanaRentFrame();
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int selectedRow = tblAlquileres.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un alquiler de la tabla para eliminar.", "Alquiler no seleccionado", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int option = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar este alquiler?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            Alquiler alquilerAEliminar = alquileresList.get(selectedRow);
            alquileresList.remove(alquilerAEliminar);
            agregarAlquilerATabla(); // Actualizar la tabla

            JOptionPane.showMessageDialog(this, "Alquiler eliminado exitosamente.", "Alquiler eliminado", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        int selectedRow = tblAlquileres.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un alquiler de la tabla para actualizar.", "Alquiler no seleccionado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        alquilerSeleccionado = alquileresList.get(selectedRow);

        txtNumeroAlquiler.setText(String.valueOf(alquilerSeleccionado.getNumAlquiler()));
        txtFechaContratro.setText(alquilerSeleccionado.getFechContrato().toString());
        txtCantMeses.setText(String.valueOf(alquilerSeleccionado.getCantMeses()));
        txtNumAdultos.setText(String.valueOf(alquilerSeleccionado.getNumAdultos()));
        txtNumNiños.setText(String.valueOf(alquilerSeleccionado.getNumNiños()));
        txtDepositoGarantia.setText(String.valueOf(alquilerSeleccionado.getDepositoGarantia()));
        txtPrecioAlquiler.setText(String.valueOf(alquilerSeleccionado.getPrecioAlquiler()));
        txtPorIncremAnual.setText(String.valueOf(alquilerSeleccionado.getPorcIncremAnual()));
        txtCedInquilino.setText(String.valueOf(alquilerSeleccionado.getInquilino().getCedInqui()));
        txtIdVivienda.setText(String.valueOf(alquilerSeleccionado.getVivienda().getIdVivienda()));
        cmbxEstado.setSelectedItem(alquilerSeleccionado.getEstado());

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnActuliazarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActuliazarActionPerformed
        if (alquilerSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un alquiler de la tabla para actualizar.", "Alquiler no seleccionado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Update selected alquiler with new values
            alquilerSeleccionado.setFechContrato(LocalDate.parse(txtFechaContratro.getText()));
            alquilerSeleccionado.setCantMeses(Integer.parseInt(txtCantMeses.getText()));
            alquilerSeleccionado.setNumAdultos(Integer.parseInt(txtNumAdultos.getText()));
            alquilerSeleccionado.setNumNiños(Integer.parseInt(txtNumNiños.getText()));
            alquilerSeleccionado.setDepositoGarantia(Double.parseDouble(txtDepositoGarantia.getText()));
            alquilerSeleccionado.setPrecioAlquiler(Double.parseDouble(txtPrecioAlquiler.getText()));
            alquilerSeleccionado.setPorcIncremAnual(Double.parseDouble(txtPorIncremAnual.getText()));
            alquilerSeleccionado.setEstado(cmbxEstado.getSelectedItem().toString());

            agregarAlquilerATabla();

            JOptionPane.showMessageDialog(this, "Alquiler actualizado exitosamente.", "Alquiler actualizado", JOptionPane.INFORMATION_MESSAGE);
            LimpiarCampos();
        } catch (DateTimeParseException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error en los datos ingresados. Verifique los valores numéricos y las fechas.", "Error de formato", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnActuliazarActionPerformed

    private void txtBuscarNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarNumActionPerformed
        String buscar = txtBuscarNum.getText().toLowerCase();

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblAlquileres.getModel());
        tblAlquileres.setRowSorter(sorter);

        // Crear un filtro que busque coincidencias en las columnas de Cédula (0) y Nombre (1)
        RowFilter<TableModel, Object> cedulaFilter = RowFilter.regexFilter("^" + buscar + "$", 0);
        RowFilter<TableModel, Object> nombreFilter = RowFilter.regexFilter(buscar, 1, 2); // Buscar en las columnas 1 y 2 (Nombre y Género)

        // Combinar los filtros para que se cumpla cualquiera de las condiciones (OR)
        RowFilter<TableModel, Object> combinedFilter = RowFilter.orFilter(java.util.Arrays.asList(cedulaFilter, nombreFilter));

        sorter.setRowFilter(combinedFilter);
    }//GEN-LAST:event_txtBuscarNumActionPerformed

    private void txtCedInquilinoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCedInquilinoMouseEntered
        String tooltipMessage = "Por favor, ingrese la cédula del inquilino.";
        txtCedInquilino.setToolTipText(tooltipMessage);
    }//GEN-LAST:event_txtCedInquilinoMouseEntered

    private void txtIdViviendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdViviendaActionPerformed

        String tooltipMessage = "Por favor, ingrese la ID Vivienda.";
        txtIdVivienda.setToolTipText(tooltipMessage);
    }//GEN-LAST:event_txtIdViviendaActionPerformed

    private void LimpiarCampos() {
        txtNumeroAlquiler.setText("");
        txtFechaContratro.setText("");
        txtCantMeses.setText("");
        txtNumAdultos.setText("");
        txtNumNiños.setText("");
        txtDepositoGarantia.setText("");
        txtPrecioAlquiler.setText("");
        txtPorIncremAnual.setText("");
        txtCedInquilino.setText("");
        txtIdVivienda.setText("");
        cmbxEstado.setSelectedIndex(0);

    }

    private Inquilino InquilinoCedula(int cedula) {
        for (Inquilino inquilino : inquilinosList) {
            if (inquilino.getCedInqui() == cedula) {
                return inquilino;
            }
        }
        return null;
    }

    private Vivienda ViviendaId(int idVivienda) {
        for (Vivienda vivienda : viviendasList) {
            if (vivienda.getIdVivienda() == idVivienda) {
                return vivienda;
            }
        }
        return null;
    }

    private void agregarAlquilerATabla() {
        DefaultTableModel model = (DefaultTableModel) tblAlquileres.getModel();
        model.setRowCount(0);

        for (Alquiler alquiler : alquileresList) {
            model.addRow(new Object[]{
                alquiler.getNumAlquiler(),
                alquiler.getFechContrato(),
                alquiler.getCantMeses(),
                alquiler.getNumAdultos(),
                alquiler.getNumNiños(),
                alquiler.getDepositoGarantia(),
                alquiler.getPrecioAlquiler(),
                alquiler.getPorcIncremAnual(),
                alquiler.getInquilino().getCedInqui(),
                alquiler.getInquilino().getNomInqui(),
                alquiler.getVivienda().getIdVivienda(),
                alquiler.getEstado()
            });
        }
    }

    private boolean isNumAlquilerExists(int numAlquiler) {
        for (Alquiler alquiler : alquileresList) {
            if (alquiler.getNumAlquiler() == numAlquiler) {
                return true;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ArrayList<Alquiler> alquileresList = new ArrayList<>();
                ArrayList<Vivienda> viviendasList = new ArrayList<>();
                ArrayList<Inquilino> inquilinoList = new ArrayList<>();
                GuanaRent guanaRentFrame = new GuanaRent();
                guanaRentFrame.setAlquileresList(alquileresList);
                Alquileres alquileresFrame = new Alquileres(alquileresList, viviendasList, inquilinoList, guanaRentFrame);
                alquileresFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActuliazar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cmbxEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAlquileres;
    private javax.swing.JLabel lblBuscarNum;
    private javax.swing.JLabel lblCantidadMeses;
    private javax.swing.JLabel lblCedInquilino;
    private javax.swing.JLabel lblDepositoGarantia;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblFechaContratro;
    private javax.swing.JLabel lblIdVivienda;
    private javax.swing.JLabel lblNumAdultos;
    private javax.swing.JLabel lblNumNiños;
    private javax.swing.JLabel lblNumeroAlquiler;
    private javax.swing.JLabel lblPorIncremAnual;
    private javax.swing.JLabel lblPrecioAlquiler;
    private javax.swing.JTable tblAlquileres;
    private javax.swing.JTextField txtBuscarNum;
    private javax.swing.JTextField txtCantMeses;
    private javax.swing.JTextField txtCedInquilino;
    private javax.swing.JTextField txtDepositoGarantia;
    private javax.swing.JTextField txtFechaContratro;
    private javax.swing.JTextField txtIdVivienda;
    private javax.swing.JTextField txtNumAdultos;
    private javax.swing.JTextField txtNumNiños;
    private javax.swing.JTextField txtNumeroAlquiler;
    private javax.swing.JTextField txtPorIncremAnual;
    private javax.swing.JTextField txtPrecioAlquiler;
    // End of variables declaration//GEN-END:variables

}
